{"/home/travis/build/npmtest/node-npmtest-angular2-jwt/test.js":"/* istanbul instrument in package npmtest_angular2_jwt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-jwt/lib.npmtest_angular2_jwt.js":"/* istanbul instrument in package npmtest_angular2_jwt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular2_jwt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular2_jwt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-jwt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular2-jwt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular2_jwt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular2_jwt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular2_jwt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_angular2_jwt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular2_jwt.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_angular2_jwt.__dirname + '/lib.npmtest_angular2_jwt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-jwt/node_modules/angular2-jwt/angular2-jwt.js":"\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar http_1 = require(\"@angular/http\");\nvar core_1 = require(\"@angular/core\");\nvar Observable_1 = require(\"rxjs/Observable\");\nrequire(\"rxjs/add/observable/fromPromise\");\nrequire(\"rxjs/add/observable/defer\");\nrequire(\"rxjs/add/operator/mergeMap\");\nvar AuthConfigConsts = (function () {\n    function AuthConfigConsts() {\n    }\n    return AuthConfigConsts;\n}());\nAuthConfigConsts.DEFAULT_TOKEN_NAME = 'token';\nAuthConfigConsts.DEFAULT_HEADER_NAME = 'Authorization';\nAuthConfigConsts.HEADER_PREFIX_BEARER = 'Bearer ';\nexports.AuthConfigConsts = AuthConfigConsts;\nvar AuthConfigDefaults = {\n    headerName: AuthConfigConsts.DEFAULT_HEADER_NAME,\n    headerPrefix: null,\n    tokenName: AuthConfigConsts.DEFAULT_TOKEN_NAME,\n    tokenGetter: function () { return localStorage.getItem(AuthConfigDefaults.tokenName); },\n    noJwtError: false,\n    noClientCheck: false,\n    globalHeaders: [],\n    noTokenScheme: false\n};\n/**\n * Sets up the authentication configuration.\n */\nvar AuthConfig = (function () {\n    function AuthConfig(config) {\n        config = config || {};\n        this._config = objectAssign({}, AuthConfigDefaults, config);\n        if (this._config.headerPrefix) {\n            this._config.headerPrefix += ' ';\n        }\n        else if (this._config.noTokenScheme) {\n            this._config.headerPrefix = '';\n        }\n        else {\n            this._config.headerPrefix = AuthConfigConsts.HEADER_PREFIX_BEARER;\n        }\n        if (config.tokenName && !config.tokenGetter) {\n            this._config.tokenGetter = function () { return localStorage.getItem(config.tokenName); };\n        }\n    }\n    AuthConfig.prototype.getConfig = function () {\n        return this._config;\n    };\n    return AuthConfig;\n}());\nexports.AuthConfig = AuthConfig;\nvar AuthHttpError = (function (_super) {\n    __extends(AuthHttpError, _super);\n    function AuthHttpError() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return AuthHttpError;\n}(Error));\nexports.AuthHttpError = AuthHttpError;\n/**\n * Allows for explicit authenticated HTTP requests.\n */\nvar AuthHttp = (function () {\n    function AuthHttp(options, http, defOpts) {\n        var _this = this;\n        this.http = http;\n        this.defOpts = defOpts;\n        this.config = options.getConfig();\n        this.tokenStream = new Observable_1.Observable(function (obs) {\n            obs.next(_this.config.tokenGetter());\n        });\n    }\n    AuthHttp.prototype.mergeOptions = function (providedOpts, defaultOpts) {\n        var newOptions = defaultOpts || new http_1.RequestOptions();\n        if (this.config.globalHeaders) {\n            this.setGlobalHeaders(this.config.globalHeaders, providedOpts);\n        }\n        newOptions = newOptions.merge(new http_1.RequestOptions(providedOpts));\n        return newOptions;\n    };\n    AuthHttp.prototype.requestHelper = function (requestArgs, additionalOptions) {\n        var options = new http_1.RequestOptions(requestArgs);\n        if (additionalOptions) {\n            options = options.merge(additionalOptions);\n        }\n        return this.request(new http_1.Request(this.mergeOptions(options, this.defOpts)));\n    };\n    AuthHttp.prototype.requestWithToken = function (req, token) {\n        if (!this.config.noClientCheck && !tokenNotExpired(undefined, token)) {\n            if (!this.config.noJwtError) {\n                return new Observable_1.Observable(function (obs) {\n                    obs.error(new AuthHttpError('No JWT present or has expired'));\n                });\n            }\n        }\n        else {\n            req.headers.set(this.config.headerName, this.config.headerPrefix + token);\n        }\n        return this.http.request(req);\n    };\n    AuthHttp.prototype.setGlobalHeaders = function (headers, request) {\n        if (!request.headers) {\n            request.headers = new http_1.Headers();\n        }\n        headers.forEach(function (header) {\n            var key = Object.keys(header)[0];\n            var headerValue = header[key];\n            request.headers.set(key, headerValue);\n        });\n    };\n    AuthHttp.prototype.request = function (url, options) {\n        var _this = this;\n        if (typeof url === 'string') {\n            return this.get(url, options); // Recursion: transform url from String to Request\n        }\n        // else if ( ! url instanceof Request ) {\n        //   throw new Error('First argument must be a url string or Request instance.');\n        // }\n        // from this point url is always an instance of Request;\n        var req = url;\n        // Create a cold observable and load the token just in time\n        return Observable_1.Observable.defer(function () {\n            var token = _this.config.tokenGetter();\n            if (token instanceof Promise) {\n                return Observable_1.Observable.fromPromise(token).mergeMap(function (jwtToken) { return _this.requestWithToken(req, jwtToken); });\n            }\n            else {\n                return _this.requestWithToken(req, token);\n            }\n        });\n    };\n    AuthHttp.prototype.get = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Get, url: url }, options);\n    };\n    AuthHttp.prototype.post = function (url, body, options) {\n        return this.requestHelper({ body: body, method: http_1.RequestMethod.Post, url: url }, options);\n    };\n    AuthHttp.prototype.put = function (url, body, options) {\n        return this.requestHelper({ body: body, method: http_1.RequestMethod.Put, url: url }, options);\n    };\n    AuthHttp.prototype.delete = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Delete, url: url }, options);\n    };\n    AuthHttp.prototype.patch = function (url, body, options) {\n        return this.requestHelper({ body: body, method: http_1.RequestMethod.Patch, url: url }, options);\n    };\n    AuthHttp.prototype.head = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Head, url: url }, options);\n    };\n    AuthHttp.prototype.options = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Options, url: url }, options);\n    };\n    return AuthHttp;\n}());\nAuthHttp = __decorate([\n    core_1.Injectable(),\n    __metadata(\"design:paramtypes\", [AuthConfig, http_1.Http, http_1.RequestOptions])\n], AuthHttp);\nexports.AuthHttp = AuthHttp;\n/**\n * Helper class to decode and find JWT expiration.\n */\nvar JwtHelper = (function () {\n    function JwtHelper() {\n    }\n    JwtHelper.prototype.urlBase64Decode = function (str) {\n        var output = str.replace(/-/g, '+').replace(/_/g, '/');\n        switch (output.length % 4) {\n            case 0: {\n                break;\n            }\n            case 2: {\n                output += '==';\n                break;\n            }\n            case 3: {\n                output += '=';\n                break;\n            }\n            default: {\n                throw 'Illegal base64url string!';\n            }\n        }\n        return this.b64DecodeUnicode(output);\n    };\n    // credits for decoder goes to https://github.com/atk\n    JwtHelper.prototype.b64decode = function (str) {\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        var output = '';\n        str = String(str).replace(/=+$/, '');\n        if (str.length % 4 == 1) {\n            throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n        }\n        for (\n        // initialize result and counters\n        var bc = 0, bs = void 0, buffer = void 0, idx = 0; \n        // get next character\n        buffer = str.charAt(idx++); \n        // character found in table? initialize bit storage and add its ascii value;\n        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n        return output;\n    };\n    // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n    JwtHelper.prototype.b64DecodeUnicode = function (str) {\n        return decodeURIComponent(Array.prototype.map.call(this.b64decode(str), function (c) {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    };\n    JwtHelper.prototype.decodeToken = function (token) {\n        var parts = token.split('.');\n        if (parts.length !== 3) {\n            throw new Error('JWT must have 3 parts');\n        }\n        var decoded = this.urlBase64Decode(parts[1]);\n        if (!decoded) {\n            throw new Error('Cannot decode the token');\n        }\n        return JSON.parse(decoded);\n    };\n    JwtHelper.prototype.getTokenExpirationDate = function (token) {\n        var decoded;\n        decoded = this.decodeToken(token);\n        if (!decoded.hasOwnProperty('exp')) {\n            return null;\n        }\n        var date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(decoded.exp);\n        return date;\n    };\n    JwtHelper.prototype.isTokenExpired = function (token, offsetSeconds) {\n        var date = this.getTokenExpirationDate(token);\n        offsetSeconds = offsetSeconds || 0;\n        if (date == null) {\n            return false;\n        }\n        // Token expired?\n        return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\n    };\n    return JwtHelper;\n}());\nexports.JwtHelper = JwtHelper;\n/**\n * Checks for presence of token and that token hasn't expired.\n * For use with the @CanActivate router decorator and NgIf\n */\nfunction tokenNotExpired(tokenName, jwt) {\n    if (tokenName === void 0) { tokenName = AuthConfigConsts.DEFAULT_TOKEN_NAME; }\n    var token = jwt || localStorage.getItem(tokenName);\n    var jwtHelper = new JwtHelper();\n    return token != null && !jwtHelper.isTokenExpired(token);\n}\nexports.tokenNotExpired = tokenNotExpired;\nexports.AUTH_PROVIDERS = [\n    {\n        provide: AuthHttp,\n        deps: [http_1.Http, http_1.RequestOptions],\n        useFactory: function (http, options) {\n            return new AuthHttp(new AuthConfig(), http, options);\n        }\n    }\n];\nfunction provideAuth(config) {\n    return [\n        {\n            provide: AuthHttp,\n            deps: [http_1.Http, http_1.RequestOptions],\n            useFactory: function (http, options) {\n                return new AuthHttp(new AuthConfig(config), http, options);\n            }\n        }\n    ];\n}\nexports.provideAuth = provideAuth;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\nfunction toObject(val) {\n    if (val === null || val === undefined) {\n        throw new TypeError('Object.assign cannot be called with null or undefined');\n    }\n    return Object(val);\n}\nfunction objectAssign(target) {\n    var source = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        source[_i - 1] = arguments[_i];\n    }\n    var from;\n    var to = toObject(target);\n    var symbols;\n    for (var s = 1; s < arguments.length; s++) {\n        from = Object(arguments[s]);\n        for (var key in from) {\n            if (hasOwnProperty.call(from, key)) {\n                to[key] = from[key];\n            }\n        }\n        if (Object.getOwnPropertySymbols) {\n            symbols = Object.getOwnPropertySymbols(from);\n            for (var i = 0; i < symbols.length; i++) {\n                if (propIsEnumerable.call(from, symbols[i])) {\n                    to[symbols[i]] = from[symbols[i]];\n                }\n            }\n        }\n    }\n    return to;\n}\n/**\n * Module for angular2-jwt\n * @experimental\n */\nvar AuthModule = AuthModule_1 = (function () {\n    function AuthModule(parentModule) {\n        if (parentModule) {\n            throw new Error('AuthModule is already loaded. Import it in the AppModule only');\n        }\n    }\n    AuthModule.forRoot = function (config) {\n        return {\n            ngModule: AuthModule_1,\n            providers: [\n                { provide: AuthConfig, useValue: config }\n            ]\n        };\n    };\n    return AuthModule;\n}());\nAuthModule = AuthModule_1 = __decorate([\n    core_1.NgModule({\n        imports: [http_1.HttpModule],\n        providers: [AuthHttp, JwtHelper]\n    }),\n    __param(0, core_1.Optional()), __param(0, core_1.SkipSelf()),\n    __metadata(\"design:paramtypes\", [AuthModule])\n], AuthModule);\nexports.AuthModule = AuthModule;\nvar AuthModule_1;\n//# sourceMappingURL=angular2-jwt.js.map"}